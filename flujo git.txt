
TRUCOS!!!!!

Salir de VIM: ESC, luego :w y luego :qw
w + ENTER
Salir del Log: q

URL: ~/OneDrive/Escritorio/Maestria_Ciencia_Datos/Ejercicios_Python/Proyecto1Git

CREAR ENTORNO virtual
    1.python -m venv NOMBRE_ENTORNO
    2.Para verificar porner "ls NOMBRE_ENTORNO"
    3.Para activarlo ".\NOMBRE_ENTORNO\Scripts\activate"
    4.Para salir del entonor poner: "deactivate
    5.Para no tener que poner toda la instrucción de activar el entorno virtual se puede poner un alias
        alias cosaAlias = .\NOMBRE_ENTORNO\Scripts\activate


Flujo de tareas en GIT:

1. Crear repositorio
2. $ git init -- Para iniciar el repositorio
3. Agregar archivos
4. $ git add <archivo> -- para agregar un archivo a area de stagging en RAM
4.1 $ git add . -- para agregar varios archivos
5. $ git commit - m "mensaje" -- para hacer commit con un mensaje, cuando se hace commit se envia el archivo al repositorio (Master)
6. $ git log -- para ver el historial de cambios del repositorio

// comandos clave

git init: inicializar el repositorio
git add nombre_de_archivo.extensión: agregar el archivo al repositorio
git commit -m “Mensaje”: Agregamos los cambios para el repositorio
git add: Agregar los cambios de la carpeta en la que nos encontramos agregar todo
git status: visualizar cambios
git log nombre_de_archivos.extensión: histórico de cambios con detalles
git push: envía a otro repositorio remoto lo que estamos haciendo
git pull: traer repositorio remoto
ls: listado de carpetas en donde me encuentro. Es decir, como emplear dir en windows.
pwd: ubicación actual
mkdir: make directory nueva carpeta
touch archivo.extensión: crear archivo vacío
cat archivo.extensión: muestra el contenido del archivo
history: historial de comandos utilizados durante esa sesión
rm archivo.extensión: Eliminación de archivo
comando --help: ayuda sobre el comando
git checkout: traer cambios realizados
git rm --cached archivo.extensión: se utiliza para devolver el archivo que se tiene en ram. Cuando escribimos git add, lo devuelve a estado natural mientras está en stagging.
git config --list: muestra la lista de configuración de git
git config --list --show-origin: rutas de acceso a la configuración de git
git log archivo.extensión: muestra la historia del archivo

//

* Si se hace un $git commit sin mensaje, se abrira una ventana con el visor de texto VIM solicitando que se ingrese un mensaje, para salir de ahi se debe hacer "esc shift +z+z", lo cual guarda el mensaje en VIM

*Para ver las diferencias entre varios Tags, se hace $git diff <tag1> <tag2>

*Estados: 
    1. cuando a un archivo no se le ha dado "add", el archivo esta en estado "Untracked", Stagging es un area temporal donde se guardan en memoria RAM los cambios antes de ser enviados al repositorio
    2. cuando se le da "add", el archivo pasa a Stagging, y pasa a estado "Tracked"
    3. Cuando se hace commit, los cambios van a la rama Master y se les asigna un Tag a cada cambio

*Volver a una version anterior: para volver a una version anterior se pueden hacer dos tipos de "reset", el duro y el suave, en el duro se lleva todo al estado "anterior" dado por parametro, en el suave, se vuelve al estado anterior, pero se tienen aun en stagging todos los cambios anteriores para ser usados en un proximo commit

$git reset <tag> --hard
$git reset <tag> --soft

* para ver como era un archivo en especifico:
    1. $git checkout <tag> archivo

Si se quiere volver a la versión actual (actual)
    1. $git checkout master archivo

*TRUCO: si hay un archivo al que anteriormente se le habia hecho "add", se puede tomar un atajo para hacer el "add" y el "commit" solo con un comando
    git commit -am "MENSAJE"

*TRUCO: para saber en que rama se esta trabajando se da:
    git show

CREACION DE RAMAS:
    git branch NOMBRE_RAMA

MOVERSE A OTRA RAMA:
    git checkout NOMBRE_RAMA

HACER MERGE: para hacer "merge" se debe ubicar con "checkout" en la rama master, para llevar asi los cambios hechos en las otras ramas alli, al hacerlo asi, se hace un nuevo commit en master, el cual va a traer el ultimo commit de master y el ultimo commit de la otra rama y los va a fusionar. Cuando se hace merge, muere la rama auxiliar y todo queda integrado en master.
    git merge NOMBRE_RAMA (estando en master)

RESOLUCION DE CONFLICTOS
    cuando se hacen cambios en la misma linea en dos ramas y se hace un merge, git va a lanzar un error de compativilidad y no va a dejar hacer el merge, VS va a subrayar el error y va a perdir que se uniformizen los archivos correspondientes en las dos ramas

CREAR REPOSITORIO WEB
    1) crear ek repositorio en GitHub
    2) copiar la direccion del repositorio (code)
    3) ir a git y poner en la rama master:
        $git remote add origin RUTA_URL
    4) para corroborar:
        $ git remote --  va a dar "origin"
        $ git remote -v -- Va a dar la direccion URL tal como es de origin
    5) Primero hacer pull:
        $ git pull origin master
        si hay problema con "refusing to merge unrelated histories se pone:
            $git pull origin master --allow-unrelated-histories
    5) hacer push para enviar los archivos/cambios al repositorio virtual con:
        $ git push origin master
    6) puedo hacer cambios directamente en los archivos desde Github, y para eso se debe hacer:
        $git pull origin master

TAGS:
    Un tag es una etiqueta para un commit, la cual se puede usar para identificar un punto especifico del desarrollo

    1) Crear un Tag:  git tag -a v0.1 -m "Resultado de primera version de historia" d062af4
    2) Ver lista de tags: git tag
    3) ver detalle de tags: git show-ref --tags
    4) empujar al repositorio los tags: git push origin --tags
    5) borrar un tag: git tag -d  nombre_tag; sin embargo ahí todavia va a estar en el repositorio virtual
    6) borrar tag de manera definitiva:
        1. Borrar tag con: git tag -d  nombre_tag
        2. Enviar el borrao total al repositorio: git push origin :refs/tags/nombre_tag

MANEJO DE RAMAS:
    Se crean ramas especificas para los Features que se quieren incluir a produccion

    1) $git branch: muestra la lista de ramas
    2) $git show-branch --all: muestra la historia de las ramas
    3) $gitk: muestra toda la historia de las ramas de manera visual
    4) $git branch -D NOMBRE_RAMA: Borra la rama

HACER MERGE:
    1) Ir a la rama maestra
    2) $git pull origin master -- Para asegurarse de estar actualizado con los cambios hechos en el repo virtual
    3) Se hace el Code Review
    4) $git merge NOMBRE_RAMA -- Hacer el merge entre master y la rama objetivo
    5) $git push origin master -- Manda los cambios del merge a master hacia el repo virtual
    
HACER PULL REQUEST:
    -En la vida real no todo el mundo tiene acceso a hacer merge con master, ya que master es la rama del servidor de produccion, por eso se tiene otra rama que se denomina "Stagging Develope", ahi se tiene un servidor de pruebas.
    -Cuando ya se tiene la rama del Feature terminada, se manda a un lugar intermedio entre la rama y Develope, este sitio se conoce como "Pull Request", es un estado intermedio antes de enviar el merge a Develope.
    -En el Pull Request otros miembros del equipo ven los cambios hechos en la rama, se evaluan y se aprueban, cuando se aprueban, se ejecuta el merge con develope.
    -El pull request no es una caracteristica de Git, si no de GitHub
    -El encargado de hacer la verificacion de los Pull Request es el DevOps (Developer Operations), el cual es un administrador del enterno de desarrollo.

    1) se hace el merge entre la rama de del Feature y develope.
    2) El DevOps va a GitHub, se para en Develope, y selecciona "Compare & Pull Request"
    3) Analiza los cambios hechos
    -El Pull Request no ejecuta el merge como tal, solo revisa que esta pasando.
    4) Si esta OK, se selecciona "Create Pull Request"
    5) El DevOps acepta el Pull Request y hace el merge en GitHub, se puede eliminar la rama si no se va a usar mas.

HACER UN FORK:
    -Si alguien no es colaborador del proyecto en GitHub, este puede clonar el proyecto, pero no puede hacer Push de ningun cambio, no puede crear Tags ni Ramas, sin embargo, si podria hacer cambios en el clon y podria solicitar que se fusionen sus cambios al proyecto.
    -Se hace el fork en git GitHub
    -Se va al local en la carpeta donde se quiere hacer el clon
    -$git clone URL(repositorio a clonar)
    -Hacer los cambios
    -Hacer el commit
    -Hacer el push al repositorio CLONADO
    -En Git Hub hacer el PULL REQUEST

AGREGAR ARCHIVOS QUE SE DEBEN IGNORAR EN EL REPOSITORIO
    -Si se quiere tener un archivo en la raiz del proyecto, pero que no se publique por tema de seguraridad (claves), o si es un archivo binario, se debe guardar ese archivo como: .gitignore

STASH: PARA GUARDAR CAMBIOS DE MANERA TEMPORAL Y PODER CAMBIAR DE RAMAS
    -Si hace un cambio y se quiere guardar de manera temporal y cambiar de rama, por ejemplo, se va a hacer un pequeño experimiento se hace: 
        -git stash
    -para ver la información del ultimo commit al cual se quiere stashear se usa:
        -git stash list
    -Sirve para hacer pequeños experimentos y no amerita hacer una nueva rama

GIT CLEAN: PARA BORRAR ARCHIVOS QUE NO DEBEN ESTAR EN EL REPOSITORIO
    -git clean: va a pedir una autorizacion para borrar los archivos.
    -git clean --dry-run: va a hacer una "simulacion" de que archivos se van a borrar
    -git clean -f: confirma el borrado del "dry run"
    
GIT CHERRY-PICK: Sirve para cuando en una rama de desarrollo se han hecho varios commits, y solo se quiere incorporar uno de esos commints, NO TODOS, a Master
    1) Ir a rama de donde se va a tomar el commit (rama desarrollo)
    2) git log --oneline: para ver el log de los commits
    3) copiar el hash del commit
    4) ir a master
    5) $git cherry-pick HASH (hash del commit)

GIT REFLOG
    -Siver para ver el historico de TODO, si la embarre con algo, por aqui lo puedo intentar recuperar.
    -Si hay un problema grave, por ejemplo, se borro un archivo clave, luego se hizo commit, luego se hizo merge con otra rama y todo se fue al carajo:
        1) ir a master
        2) $git reflog 
        3) Encontrar el HEAD (checkpoint) anterior a la cagada donde todo estaba bien.
        4) copiar el hash del HEAD
        5) $git reset --hard hash


